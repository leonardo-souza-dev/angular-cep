{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../http-error-handler.service\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json',\n    Authorization: 'my-auth-token'\n  })\n};\nexport class HeroesService {\n  constructor(http, httpErrorHandler) {\n    this.http = http;\n    this.heroesUrl = 'obter-cep'; // URL to web api\n    this.handleError = httpErrorHandler.createHandleError('HeroesService');\n  }\n  /** GET heroes from the server */\n  getHeroes() {\n    return this.http.get(this.heroesUrl).pipe(catchError(this.handleError('getHeroes', [])));\n  }\n  /* GET heroes whose name contains search term */\n  searchHeroes(term) {\n    term = term.trim();\n    // Add safe, URL encoded search parameter if there is a search term\n    const options = term ? {\n      params: new HttpParams().set('name', term)\n    } : {};\n    return this.http.get(this.heroesUrl, options).pipe(catchError(this.handleError('searchHeroes', [])));\n  }\n  //////// Save methods //////////\n  /** POST: add a new hero to the database */\n  addHero(hero) {\n    return this.http.post(this.heroesUrl, hero, httpOptions).pipe(catchError(this.handleError('addHero', hero)));\n  }\n  /** DELETE: delete the hero from the server */\n  deleteHero(id) {\n    const url = `${this.heroesUrl}/${id}`; // DELETE api/heroes/42\n    return this.http.delete(url, httpOptions).pipe(catchError(this.handleError('deleteHero')));\n  }\n  /** PUT: update the hero on the server. Returns the updated hero upon success. */\n  updateHero(hero) {\n    httpOptions.headers = httpOptions.headers.set('Authorization', 'my-new-auth-token');\n    return this.http.put(this.heroesUrl, hero, httpOptions).pipe(catchError(this.handleError('updateHero', hero)));\n  }\n}\nHeroesService.ɵfac = function HeroesService_Factory(t) {\n  return new (t || HeroesService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.HttpErrorHandler));\n};\nHeroesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HeroesService,\n  factory: HeroesService.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAAqBA,UAAU,QAAQ,sBAAsB;AAC7D,SAASC,WAAW,QAAQ,sBAAsB;AAIlD,SAASC,UAAU,QAAQ,gBAAgB;;;;AAK3C,MAAMC,WAAW,GAAG;EAClBC,OAAO,EAAE,IAAIH,WAAW,CAAC;IACvB,cAAc,EAAG,kBAAkB;IACnCI,aAAa,EAAE;GAChB;CACF;AAGD,OAAM,MAAOC,aAAa;EAIxBC,YACUC,IAAgB,EACxBC,gBAAkC;IAD1B,SAAI,GAAJD,IAAI;IAJd,cAAS,GAAG,WAAW,CAAC,CAAE;IAMxB,IAAI,CAACE,WAAW,GAAGD,gBAAgB,CAACE,iBAAiB,CAAC,eAAe,CAAC;EACxE;EAEA;EACAC,SAAS;IACP,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAS,IAAI,CAACC,SAAS,CAAC,CACzCC,IAAI,CACHb,UAAU,CAAC,IAAI,CAACQ,WAAW,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC,CAC9C;EACL;EAEA;EACAM,YAAY,CAACC,IAAY;IACvBA,IAAI,GAAGA,IAAI,CAACC,IAAI,EAAE;IAElB;IACA,MAAMC,OAAO,GAAGF,IAAI,GACnB;MAAEG,MAAM,EAAE,IAAIpB,UAAU,EAAE,CAACqB,GAAG,CAAC,MAAM,EAAEJ,IAAI;IAAC,CAAE,GAAG,EAAE;IAEpD,OAAO,IAAI,CAACT,IAAI,CAACK,GAAG,CAAS,IAAI,CAACC,SAAS,EAAEK,OAAO,CAAC,CAClDJ,IAAI,CACHb,UAAU,CAAC,IAAI,CAACQ,WAAW,CAAS,cAAc,EAAE,EAAE,CAAC,CAAC,CACzD;EACL;EAEA;EAEA;EACAY,OAAO,CAACC,IAAU;IAChB,OAAO,IAAI,CAACf,IAAI,CAACgB,IAAI,CAAO,IAAI,CAACV,SAAS,EAAES,IAAI,EAAEpB,WAAW,CAAC,CAC3DY,IAAI,CACHb,UAAU,CAAC,IAAI,CAACQ,WAAW,CAAC,SAAS,EAAEa,IAAI,CAAC,CAAC,CAC9C;EACL;EAEA;EACAE,UAAU,CAACC,EAAU;IACnB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACb,SAAS,IAAIY,EAAE,EAAE,CAAC,CAAC;IACvC,OAAO,IAAI,CAAClB,IAAI,CAACoB,MAAM,CAACD,GAAG,EAAExB,WAAW,CAAC,CACtCY,IAAI,CACHb,UAAU,CAAC,IAAI,CAACQ,WAAW,CAAC,YAAY,CAAC,CAAC,CAC3C;EACL;EAEA;EACAmB,UAAU,CAACN,IAAU;IACnBpB,WAAW,CAACC,OAAO,GACjBD,WAAW,CAACC,OAAO,CAACiB,GAAG,CAAC,eAAe,EAAE,mBAAmB,CAAC;IAE/D,OAAO,IAAI,CAACb,IAAI,CAACsB,GAAG,CAAO,IAAI,CAAChB,SAAS,EAAES,IAAI,EAAEpB,WAAW,CAAC,CAC1DY,IAAI,CACHb,UAAU,CAAC,IAAI,CAACQ,WAAW,CAAC,YAAY,EAAEa,IAAI,CAAC,CAAC,CACjD;EACL;;AA5DWjB,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;SAAbA,aAAa;EAAAyB,SAAbzB,aAAa;AAAA","names":["HttpParams","HttpHeaders","catchError","httpOptions","headers","Authorization","HeroesService","constructor","http","httpErrorHandler","handleError","createHandleError","getHeroes","get","heroesUrl","pipe","searchHeroes","term","trim","options","params","set","addHero","hero","post","deleteHero","id","url","delete","updateHero","put","factory"],"sourceRoot":"","sources":["D:\\aulas\\angular_proj\\angular-x6reg7\\src\\app\\product-list\\heroes.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { HttpHeaders } from '@angular/common/http';\r\n\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\nimport { Hero } from './hero';\r\nimport { HttpErrorHandler, HandleError } from '../http-error-handler.service';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({\r\n    'Content-Type':  'application/json',\r\n    Authorization: 'my-auth-token'\r\n  })\r\n};\r\n\r\n@Injectable()\r\nexport class HeroesService {\r\n  heroesUrl = 'obter-cep';  // URL to web api\r\n  private handleError: HandleError;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    httpErrorHandler: HttpErrorHandler) {\r\n    this.handleError = httpErrorHandler.createHandleError('HeroesService');\r\n  }\r\n\r\n  /** GET heroes from the server */\r\n  getHeroes(): Observable<Hero[]> {\r\n    return this.http.get<Hero[]>(this.heroesUrl)\r\n      .pipe(\r\n        catchError(this.handleError('getHeroes', []))\r\n      );\r\n  }\r\n\r\n  /* GET heroes whose name contains search term */\r\n  searchHeroes(term: string): Observable<Hero[]> {\r\n    term = term.trim();\r\n\r\n    // Add safe, URL encoded search parameter if there is a search term\r\n    const options = term ?\r\n     { params: new HttpParams().set('name', term) } : {};\r\n\r\n    return this.http.get<Hero[]>(this.heroesUrl, options)\r\n      .pipe(\r\n        catchError(this.handleError<Hero[]>('searchHeroes', []))\r\n      );\r\n  }\r\n\r\n  //////// Save methods //////////\r\n\r\n  /** POST: add a new hero to the database */\r\n  addHero(hero: Hero): Observable<Hero> {\r\n    return this.http.post<Hero>(this.heroesUrl, hero, httpOptions)\r\n      .pipe(\r\n        catchError(this.handleError('addHero', hero))\r\n      );\r\n  }\r\n\r\n  /** DELETE: delete the hero from the server */\r\n  deleteHero(id: number): Observable<unknown> {\r\n    const url = `${this.heroesUrl}/${id}`; // DELETE api/heroes/42\r\n    return this.http.delete(url, httpOptions)\r\n      .pipe(\r\n        catchError(this.handleError('deleteHero'))\r\n      );\r\n  }\r\n\r\n  /** PUT: update the hero on the server. Returns the updated hero upon success. */\r\n  updateHero(hero: Hero): Observable<Hero> {\r\n    httpOptions.headers =\r\n      httpOptions.headers.set('Authorization', 'my-new-auth-token');\r\n\r\n    return this.http.put<Hero>(this.heroesUrl, hero, httpOptions)\r\n      .pipe(\r\n        catchError(this.handleError('updateHero', hero))\r\n      );\r\n  }\r\n}\r\n\r\n\r\n/*\r\nCopyright Google LLC. All Rights Reserved.\r\nUse of this source code is governed by an MIT-style license that\r\ncan be found in the LICENSE file at https://angular.io/license\r\n*/"]},"metadata":{},"sourceType":"module","externalDependencies":[]}